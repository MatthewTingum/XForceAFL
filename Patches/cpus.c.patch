--- cpus.c	2018-11-14 22:16:02.904401000 -0600
+++ cpus.c.x	2018-07-09 22:28:42.136046000 -0500
@@ -38,6 +38,7 @@
 #include "qemu/main-loop.h"
 #include "qemu/bitmap.h"
 #include "qemu/seqlock.h"
+#include "afl.h"
 
 #ifndef _WIN32
 #include "qemu/compatfd.h"
@@ -926,6 +927,10 @@
 
 static void tcg_exec_all(void);
 
+static int afl_qemuloop_pipe[2];        /* to notify mainloop to become forkserver */
+static CPUState *restart_cpu = NULL;    /* cpu to restart */
+
+
 static void *qemu_tcg_cpu_thread_fn(void *arg)
 {
     CPUState *cpu = arg;
@@ -953,7 +958,7 @@
     /* process any pending work */
     exit_request = 1;
 
-    while (1) {
+    while (!afl_wants_cpu_to_stop) {
         tcg_exec_all();
 
         if (use_icount) {
@@ -966,6 +971,23 @@
         qemu_tcg_wait_io_event();
     }
 
+    if(afl_wants_cpu_to_stop) {
+        /* tell iothread to run AFL forkserver */
+        afl_wants_cpu_to_stop = 0;
+        if(write(afl_qemuloop_pipe[1], "FORK", 4) != 4)
+            perror("write afl_qemuloop_pip");
+        afl_qemuloop_pipe[1] = -1;
+
+        restart_cpu = first_cpu;
+        first_cpu = NULL;
+        cpu_disable_ticks();
+
+        /* let iothread through once ... */
+        qemu_tcg_wait_io_event();
+        sleep(1);
+    }
+
+
     return NULL;
 }
 
@@ -1168,8 +1190,44 @@
     }
 }
 
+static void
+gotPipeNotification(void *ctx)
+{
+    CPUArchState *env;
+    char buf[4];
+
+    /* cpu thread asked us to run AFL forkserver */
+    if(read(afl_qemuloop_pipe[0], buf, 4) != 4) {
+        printf("error reading afl/qemu pipe!\n");
+        exit(1);
+    }
+
+    printf("start up afl forkserver!\n");
+    afl_setup();
+    env = NULL; //XXX for now.. if we want to share JIT to the parent we will need to pass in a real env here
+    //env = restart_cpu->env_ptr;
+    afl_forkserver(env);
+
+    /* we're now in the child! */
+    tcg_cpu_thread = NULL;
+    first_cpu = restart_cpu;
+    if(aflEnableTicks) // re-enable ticks only if asked to
+        cpu_enable_ticks();
+    qemu_tcg_init_vcpu(restart_cpu);
+
+    qemu_clock_warp(QEMU_CLOCK_VIRTUAL);
+    /* continue running iothread in child process... */
+}
+
+
 void qemu_init_vcpu(CPUState *cpu)
 {
+    if(pipe(afl_qemuloop_pipe) == -1) {
+        perror("qemuloop pipe");
+        exit(1);
+    }
+    qemu_set_fd_handler(afl_qemuloop_pipe[0], gotPipeNotification, NULL, NULL);
+
     cpu->nr_cores = smp_cores;
     cpu->nr_threads = smp_threads;
     cpu->stopped = true;
