--- afl-fuzz.c	2018-11-14 23:49:22.574484000 -0600
+++ afl-fuzz.c.x	2018-07-24 21:28:32.387552000 -0500
@@ -1905,8 +1905,8 @@
 
     setsid();
 
-    dup2(dev_null_fd, 1);
-    dup2(dev_null_fd, 2);
+    //dup2(dev_null_fd, 1);
+    //dup2(dev_null_fd, 2);
 
     if (out_file) {
 
@@ -2130,6 +2130,16 @@
 
 static u8 run_target(char** argv) {
 
+  // ## hypercall back here to inform that we've exited successfully or timeout
+  // psuedo code:
+	// Let target know that it can run
+	// Target runs
+	// AFL times out after 30 seconds -- exit status 9
+	// else target reports back and we report status 0
+
+  //printf("Made it to run target\n");
+  //exit(0);
+
   static struct itimerval it;
   static u32 prev_timed_out = 0;
 
@@ -2142,6 +2152,7 @@
      must prevent any earlier operations from venturing into that
      territory. */
 
+  //printf("preparing to memset\n");
   memset(trace_bits, 0, MAP_SIZE);
   MEM_BARRIER();
 
@@ -2150,6 +2161,7 @@
      execve(). There is a bit of code duplication between here and 
      init_forkserver(), but c'est la vie. */
 
+  /* Not running this since we're not forking
   if (dumb_mode == 1 || no_forkserver) {
 
     child_pid = fork();
@@ -2166,27 +2178,27 @@
 
 #ifdef RLIMIT_AS
 
-        setrlimit(RLIMIT_AS, &r); /* Ignore errors */
+        setrlimit(RLIMIT_AS, &r); 
 
 #else
 
-        setrlimit(RLIMIT_DATA, &r); /* Ignore errors */
+        setrlimit(RLIMIT_DATA, &r);
 
-#endif /* ^RLIMIT_AS */
+#endif 
 
       }
 
       r.rlim_max = r.rlim_cur = 0;
 
-      //XXX setrlimit(RLIMIT_CORE, &r); /* Ignore errors */
+      //XXX setrlimit(RLIMIT_CORE, &r); 
 
-      /* Isolate the process and configure standard descriptors. If out_file is
-         specified, stdin is /dev/null; otherwise, out_fd is cloned instead. */
+      //Isolate the process and configure standard descriptors. If out_file is
+      //specified, stdin is /dev/null; otherwise, out_fd is cloned instead.
 
       setsid();
 
-      dup2(dev_null_fd, 1);
-      dup2(dev_null_fd, 2);
+      //dup2(dev_null_fd, 1);
+      //dup2(dev_null_fd, 2);
 
       if (out_file) {
 
@@ -2199,14 +2211,14 @@
 
       }
 
-      /* On Linux, would be faster to use O_CLOEXEC. Maybe TODO. */
+      //On Linux, would be faster to use O_CLOEXEC. Maybe TODO.
 
       close(dev_null_fd);
       close(out_dir_fd);
       close(dev_urandom_fd);
       close(fileno(plot_file));
 
-      /* Set sane defaults for ASAN if nothing else specified. */
+      // Set sane defaults for ASAN if nothing else specified. 
 
       setenv("ASAN_OPTIONS", "abort_on_error=1:"
                              "detect_leaks=0:"
@@ -2219,8 +2231,8 @@
 
       execv(target_path, argv);
 
-      /* Use a distinctive bitmap value to tell the parent about execv()
-         falling through. */
+      // Use a distinctive bitmap value to tell the parent about execv()
+      //   falling through.
 
       *(u32*)trace_bits = EXEC_FAIL_SIG;
       exit(0);
@@ -2231,8 +2243,8 @@
 
     s32 res;
 
-    /* In non-dumb mode, we have the fork server up and running, so simply
-       tell it to have at it, and then read back PID. */
+    // In non-dumb mode, we have the fork server up and running, so simply
+    //   tell it to have at it, and then read back PID. 
 
     if ((res = write(fsrv_ctl_fd, &prev_timed_out, 4)) != 4) {
 
@@ -2251,16 +2263,19 @@
     if (child_pid <= 0) FATAL("Fork server is misbehaving (OOM?)");
 
   }
+  */
 
   /* Configure timeout, as requested by user, then wait for child to terminate. */
 
   it.it_value.tv_sec = (exec_tmout / 1000);
   it.it_value.tv_usec = (exec_tmout % 1000) * 1000;
-
+  //printf("Setting timer\n");
   setitimer(ITIMER_REAL, &it, NULL);
 
   /* The SIGALRM handler simply kills the child_pid and sets child_timed_out. */
 
+  
+  /*
   if (dumb_mode == 1 || no_forkserver) {
 
     if (waitpid(child_pid, &status, 0) <= 0) PFATAL("waitpid() failed");
@@ -2277,6 +2292,27 @@
     }
 
   }
+  */
+
+  // Our target will still report back a status when it's done
+    s32 res;
+
+  //printf("Reading pipe...\n");
+    if ((res = read(fsrv_st_fd, &status, 4)) != 4) {
+
+      if (stop_soon) return 0;
+      RPFATAL(res, "Unable to communicate with fork server (OOM?)");
+
+    }
+
+    //printf("TFL: Read back a status\n");
+  
+
+  // ## -- TFL hack
+  // 
+
+  // We do not fork or execute unless we reach a real crash
+  // A true crash will timeout and execute a new VM
 
   child_pid = 0;
   it.it_value.tv_sec = 0;
@@ -2444,10 +2480,13 @@
 
     if (stop_soon || fault != crash_mode) goto abort_calibration;
 
+    // ## TFL HACK - pretend for now
     if (!dumb_mode && !stage_cur && !count_bytes(trace_bits)) {
+      printf("No trace bits!\n");
       fault = FAULT_NOINST;
       goto abort_calibration;
     }
+    
 
     cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
 
@@ -7762,3 +7801,4 @@
 }
 
 #endif /* !AFL_LIB */
+
